

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;



ENTITY ALU_32_BIT IS
	PORT(	en     : IN  STD_LOGIC;
	      rst    : IN  STD_LOGIC;
			clk    : IN  STD_LOGIC;
			op_sel : IN  STD_LOGIC_VECTOR( 4 DOWNTO 0);
			RA     : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
			RB     : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
			RZ     : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			FLAG_B : OUT STD_LOGIC_VECTOR( 7 DOWNTO 0)	
	);
END ALU_32_BIT;



ARCHITECTURE BHV OF ALU_32_BIT IS
   SIGNAL   sumsub_out : STD_LOGIC_VECTOR(32 DOWNTO 0) := (OTHERS => '0');
	SIGNAL   sumsub_res : integer   :=  0;
	SIGNAL   ou_flw     : std_logic := '0';
   SIGNAL   FLAG_S     : STD_LOGIC_VECTOR( 7 DOWNTO 0) := (OTHERS => '0');
	
	
	BEGIN
		PROCESS(en, op_sel, rst, clk)
			BEGIN
				IF(rst = '0') THEN 
					IF( en = '1') THEN
						CASE op_sel IS
							WHEN "00000" => sumsub_res <= TO_INTEGER(UNSIGNED(RA)) + TO_INTEGER(UNSIGNED(RB));
												 sumsub_out <= STD_LOGIC_VECTOR(TO_UNSIGNED(sumsub_res, sumsub_out'length));
												 IF(sumsub_out(32) = '1') THEN FLAG_B <= FLAG_S(7 DOWNTO 1) & "1"; ELSE FLAG_B <= "11111111"; END IF;
									          RZ <= sumsub_out(31 DOWNTO 0);
												 
							WHEN "00001" => sumsub_res <= TO_INTEGER(UNSIGNED(RA)) - TO_INTEGER(UNSIGNED(RB));
												 sumsub_out <= STD_LOGIC_VECTOR(TO_UNSIGNED(sumsub_res, sumsub_out'length));
												 IF(sumsub_out > x"FFFFFFFF") THEN FLAG_B <= FLAG_S(7 DOWNTO 2) & "1" & FLAG_S(0); END IF;
												 RZ <= sumsub_out(31 DOWNTO 0);
												 
							WHEN "00010" => RZ <= RA AND RB;
									  WHEN "00011" => RZ <= RA OR  RB;
							WHEN "00100" => RZ <=  NOT(RA);
							WHEN "00101" => RZ <= RA XOR RB;
							WHEN "00110" => RZ <= '0' & RA(31 DOWNTO 1);
							WHEN "00111" => RZ <= RA(30 DOWNTO 0) & '0';
	--						WHEN "01000" => 
	--						WHEN "01001" => 
	--						WHEN "01010" => 
	--						WHEN "01011" => 
	--						WHEN "01100" => 
	--						WHEN "01101" => 
	--						WHEN "01110" => 
	--						WHEN "01111" => 
	--						WHEN "10000" => 
	--						WHEN "10001" => 
	--						WHEN "10010" => 
	--						WHEN "10011" => 
	--						WHEN "10100" => 
	--						WHEN "10101" => 
	--						WHEN "10110" => 
	--						WHEN "10111" => 
	--						WHEN "11000" => 
	--						WHEN "11001" => 
	--						WHEN "11010" => 
	--						WHEN "11011" => 
	--						WHEN "11100" => 
	--						WHEN "11101" => 
	--						WHEN "11110" => 
	--						WHEN "11111" => 
							WHEN OTHERS  => NULL;
						END CASE;
					END IF;
				ELSE
					--SULLA CONDIZIONE DI RESET OVVERO rst = '1'
					-- I REGISTRI {RA, RB} SONO INPUT E QUINDI NON
					-- POSSONO ESSERE GUIDATI DAL RESET
			      RZ <= (OTHERS => '0');
				END IF;
		END PROCESS;
END BHV;
		